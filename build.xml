<?xml version="1.0" encoding="utf-8"?>
<project default="compile">

  <!-- build.xml for github.com/UCSB-CS56-Projects/cs56-games-hangman
       original author: Gyeonghun Lee for CS56, W12
       modified by David Borden and Ernesto Cojulun S12
       modified by Blake Zimmerman for github W14
       modified by Ziliang Zeng and Matin Akhamzadeh for CS56, W16 -->

  <property environment="env"/> <!-- load the environment variables --> 
  <property name="webRoot" value="${env.HOME}/public_html/cs56" />
  <property name="webBaseUrl" value="http://www.cs.ucsb.edu/~${env.USER}/cs56" />
  <property name="propertyPackage" value="edu.ucsb.cs56.projects.games.cs56_games_hangman" />

  <property name="mainClassCLI" value="edu.ucsb.cs56.projects.games.hangman.CLIMain" />
  <property name="mainClassGUI" value="edu.ucsb.cs56.projects.games.hangman.GUIMain" />

  <property name="project" value="cs56-games-hangman" />
  <property name="javadocDest" value="${webRoot}/${project}/javadoc" /> 
  <property name="javadocURL" value="${webBaseUrl}/${project}/javadoc" /> 
  
  <path id="project.class.path">
    <pathelement location="build"/>
    <pathelement location="lib/junit-4.8.2.jar"/>
  </path>

  <target name="compile" description="compile the code">
    <mkdir dir="build" />
    <javac srcdir="src" destdir="build" debug="true" debuglevel="lines,source" includeantruntime ="false">
      <classpath refid="project.class.path" />
    </javac>
    
    <!-- copy the WordList.txt file, plus all the sounds 
         into a directory that ends up in the JAR file -->
    <copy todir="build/resources" > 
      <fileset dir="resources"/> 
    </copy> 

  </target>

  <target name="run" depends="compile, runGUI-noarg, runGUI-witharg" description="run the hangman GUI version of the game"/>

  <target name="runGUI" depends="compile, runGUI-noarg, runGUI-witharg" description="runs the hangman GUI version of the game"/>

  <target name="runCLI" depends="compile, runCLI-noarg, runCLI-witharg" description="runs the hangman CLI version of the game"/>

  <target name="runGUI-noarg" unless="arg0" description="runs the hangman GUI version of the game with custom words">
    <echo>
To run with your own word list file, you can type `ant run -Darg0="YourFileName"`
You can also use "Enter" key instead of clicking a "Submit" button.
    </echo>
    <java classname="${mainClassGUI}" fork="true">
      <classpath refid="project.class.path" />
    </java>
  </target>

  <target name="runGUI-witharg" if="arg0">
    <java classname="${mainClassGUI}" fork="true">
      <classpath refid="project.class.path" />
      <arg value="${arg0}"/>
    </java>
  </target>

  <target name="runCLI-noarg" unless="arg0" description="runs the hangman CLI version of the game with custom words">
    <echo>
To run with your own word list file, you can type `ant run -Darg0="YourFileName"`
You can also use "Enter" key instead of clicking a "Submit" button.
    </echo>
    <java classname="${mainClassCLI}" fork="true">
      <classpath refid="project.class.path" />
    </java>
  </target>

  <target name="runCLI-witharg" if="arg0">
    <java classname="${mainClassCLI}" fork="true">
      <classpath refid="project.class.path" />
      <arg value="${arg0}"/>
    </java>
  </target>


  <target name="clean" description="delete unnecessary files and directories">
    <delete dir="javadoc" quiet="true" />
    <delete dir="build" quiet="true"/>
  </target>

  <target name="test" depends="compile" description="runs all .java that ends in *Test.java">

    <junit haltonerror="no" haltonfailure="no">
	<classpath refid="project.class.path" />
      
      <batchtest fork="yes">
        <fileset dir="src">
          <!-- this will pick up every class with a name ending in Test -->
          <include name="**/HangmanGameTest.java"/>
        </fileset>
      </batchtest>

      <formatter type="plain" usefile="false" /> 

    </junit>
  </target>

  <target name="javadoc" depends="compile" description="creates a javadoc of the files"> 

    <delete dir="javadoc" quiet="true" /> 
    <javadoc  destdir="javadoc" author="true" version="true" use="true" >  
      <fileset dir="src" includes="**/*.java"/>  
      <classpath refid="project.class.path" />
    </javadoc>

    <!-- delete the old javadoc -->
    <delete quiet="true" dir="${javadocDest}" /> 

    <!-- copy everything you just made to the javadoc destination, and then make it readable --> 

    <copy todir="${javadocDest}" > 
      <fileset dir="javadoc"/> 
    </copy> 

    <!-- Note: this only does the chmod command on the 
    javadoc subdirectory and its contents.  You MIGHT have to
    MANUALLY do the chmod on the parent directories.  However,
    you should only need to do that once. --> 

    <chmod dir="${javadocDest}" perm="755"  type="dir" includes="**" /> 
    <chmod dir="${javadocDest}" perm="755"  type="file" includes="**/*" /> 
    <echo>Javadoc deployed to ${javadocURL} if on CSIL</echo>
    <echo> or if not on CSIL, try file:///${javadocDest}/index.html</echo>

  </target>
  
</project>
